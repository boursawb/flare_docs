<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Overview</title>
    </head>
    <body>
        <h1>Overview</h1>
        <p><MadCap:variable name="General.IPSshortName" MadCap:conditions="General.IPS" /><MadCap:variable name="General.CJPshortName" MadCap:conditions="General.CJP" /> includes the ability to integrate with different finishing partners by configuring a finishing plan. A finishing plan can be added on a product-by-product basis and will produce batched output for consumption by the down-stream device. In the case of a Horizon SmartStacker, IPS&#160;does the following.</p>
        <ul>
            <li>Create sheets that use proper margins and gutters to maintain compatibility with any limitations of the SmartStacker</li>
            <li>Ensures that orders always start at the first position of an imposition row / column by dynamically padding the batch content with blanks, resulting in offset stacking.  To break the batches up by an attribute other than order ID, the bundle expression can be configured with a different attribute that better suits your needs</li>
            <li>IPS monitors imposition streams to correct any situations the machine cannot handle (ie. Can’t have two consecutive partial rows of content).  IPS corrects this situation by adding printable waste (blanks the machine can’t remove)</li>
            <li>Generates a laycrimp file to communicate to the finishing machine how to cut and stack the output</li>
            <li>Generate a JDF file to instruct the DFE to enable a finishing plan</li>
        </ul>
        <h2>Generated output</h2>
        <p>The following image shows output generated by <MadCap:variable name="General.IPSshortName" MadCap:conditions="General.IPS" /><MadCap:variable name="General.CJPshortName" MadCap:conditions="General.CJP" /> using a SmartStacker finishing plan, including both waste and printed waste that was imposed 12UP&#160;on the sheet. The different types of blanks that can be used are discussed in detail in the imposition section, found here. <MadCap:xref href="1_Imposition.htm#BlanksPrintedWaste">Defining blanks</MadCap:xref></p>
        <p>
            <img src="../../../Resources/Images/Assets/IPS/stackerDesignerMode.png" title="Smart Stacker example" alt="Smart Stacker example" class="img" />
        </p>
        <h2>Configuration overview</h2>
        <p>To integrate SmartStacker into your <MadCap:variable name="General.IPSshortName" MadCap:conditions="General.IPS" /><MadCap:variable name="General.CJPshortName" MadCap:conditions="General.CJP" /> workflow, the following tasks must be completed. The SmartStacker Guided walk-through will guide you through each item in detail.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>System configuration</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p><MadCap:variable name="General.IPSshortName" MadCap:conditions="General.IPS" /><MadCap:variable name="General.CJPshortName" MadCap:conditions="General.CJP" /> requires a new finishing directory structure in the <code>sharedconfig </code>location, as well as a few configuration file updates in order to integrate with a SmartStacker device. </p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Adding a finishing plan</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>A&#160;finishing plan will be added to each batch component that will be sent to the SmartStacker. The finishing plan specifies the laycrimp layout file and bundle expression that will be used. </p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Building a laycrimp layout</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>This file reside in <code>sharedconfig</code>, in the finishing folder structure. As many layout files as required can exist at this location and a laycrimp layout can be used by any number of batch components.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Updating the imposition</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Impositions that are used by products that are part of a SmartStacker workflow require that the <strong class="standOutPrimary">type </strong>be configured for <strong class="standOutPrimary">step and repeat </strong>and that reverse order has been set to true. Other details regarding the imposition will are discussed in the SmartStacker Guided walk-through.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Creating a batch ticket</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>This workflow requires that batch tickets match the size of the content within the job. This is accomplished through the use of <strong class="standOutPrimary">batch imposed batch tickets</strong>, often referred to as content sized batch tickets. Details related to building and using content sized batch tickets is covered in the SmartStacker Guided walk-through.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
    </body>
</html>